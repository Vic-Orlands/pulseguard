services:
  # Next.js Frontend
  # nextjs:
  #   build:
  #     context: .
  #     dockerfile: Dockerfile.frontend # Path to your Next.js Dockerfile
  #   container_name: nextjs
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - NEXT_PUBLIC_API_URL=http://go-backend:8080
  #     - OTLP_ENDPOINT=http://otel-collector:4318 # For frontend OTLP HTTP
  #   depends_on:
  #     - go-backend
  #     - otel-collector
  #     - prometheus
  #     - loki
  #     - tempo
  #   networks:
  #     - monitoring
  #   restart: unless-stopped

  # OpenTelemetry Collector
  otel-collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: otel-collector
    command: ["--config=/etc/otel-collector-config.yaml"]
    volumes:
      - ./logs:/app/logs
      - ./otel-collector-config.yaml:/etc/otel-collector-config.yaml
    ports:
      - "4319:4317" # OTLP gRPC
      - "4315:4318" # OTLP HTTP
      - "8888:8888" # Collector metrics
      - "8889:8889" # Prometheus metrics
      - "1313:1313" # Health check
    networks:
      - monitoring
    restart: unless-stopped

  # Loki for log aggregation
  loki:
    image: grafana/loki:latest
    container_name: loki
    ports:
      - "3100:3100"
      - "9096:9096"
    volumes:
      - ./loki-config.yaml:/etc/loki/local-config.yaml
      - loki_data:/tmp/loki
    command: -config.file=/etc/loki/local-config.yaml
    networks:
      - monitoring
    restart: unless-stopped
    # user: "1000:1000" # Run as non-root user

  # Tempo for distributed tracing
  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: ["-config.file=/etc/tempo.yaml"]
    volumes:
      - ./tempo.yaml:/etc/tempo.yaml
      - tempo_data:/var/tempo/blocks
    user: root
    ports:
      - "3200:3200" # tempo
      - "9095:9095" # tempo gRPC (for frontend communication)
      - "4317:4317" # otlp grpc
      - "4318:4318" # otlp HTTP
    networks:
      - monitoring
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3200/ready"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Prometheus for metrics storage
  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"
      - "--storage.tsdb.path=/prometheus"
    ports:
      - "9090:9090"
    networks:
      - monitoring
    restart: unless-stopped

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3101:3000"
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
      - ./grafana/dashboards:/var/lib/grafana/dashboards
    # user: "1000:1000" # Run as non-root user
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=grafana-piechart-panel,grafana-worldmap-panel
    networks:
      - monitoring
    restart: unless-stopped
    depends_on:
      - prometheus

  # PostgreSQL database
  postgres:
    image: postgres:15
    container_name: postgres
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: newpass123
      POSTGRES_DB: pulseguard
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - monitoring
    ports:
      - "5432:5432"
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d pulseguard"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Go backend service
  go-backend:
    # image: pulseguard.slim
    build:
      context: ./backend # Path to your Go project (with Dockerfile)
      dockerfile: Dockerfile
    container_name: go-backend
    env_file:
      - .env
    # ports:
    #   - "8080:8080" # Expose your Go HTTP server
    environment:
      # - POSTGRES_URL=postgresql://neondb_owner:npg_UP7rwnCW8Rly@ep-dry-silence-a4fqwlt8-pooler.us-east-1.aws.neon.tech/neondb?sslmode=require
      - DB_URL=postgres://postgres:newpass123@postgres:5432/pulseguard?sslmode=disable
      - PORT=8081
      - JWT_SECRET=a-string-secret-at-least-256-bits-long
      - TEMPO_URL=http://tempo:3200
      - OTLP_ENDPOINT=localhost:4318
      - LOKI_URL=http://localhost:3100
      - PROMETHEUS_URL=http://prometheus:9090
    depends_on:
      - postgres
      - otel-collector
      - prometheus
      - loki
      - tempo
    networks:
      - monitoring
    restart: unless-stopped
    volumes:
      - ./logs:/app/logs
    tty: true
    stdin_open: true

  # pgadmin:
  #   image: dpage/pgadmin4
  #   container_name: pgadmin
  #   environment:
  #     PGADMIN_DEFAULT_EMAIL: admin@example.com
  #     PGADMIN_DEFAULT_PASSWORD: admin
  #   ports:
  #     - "5050:80"
  #   networks:
  #     - monitoring
  #   depends_on:
  #     - postgres

networks:
  monitoring:
    driver: bridge

volumes:
  prometheus_data:
  grafana_data:
  tempo_data:
  loki_data:
  postgres_data: # remove this for production
